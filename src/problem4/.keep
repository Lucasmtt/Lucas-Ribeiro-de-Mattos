// Approach A: Using the well-known mathematical formula to calculate the sum of the first 'n' numbers.
// This formula is super efficient as it directly computes the result in constant time, without needing to iterate.
function sum_to_n_a(n: number): number { 
    // The formula for the sum of the first 'n' numbers is: (n * (n + 1)) / 2
    // This works because it pairs numbers from the start and end of the range.
    return (n * (n + 1)) / 2;
}

// Approach B: The classic iterative method.
// We'll just loop through all the numbers from 1 to 'n' and accumulate the sum.
function sum_to_n_b(n: number): number {
    let sum = 0; // Initialize the sum at zero.
    
    // Loop from 1 through 'n' and add each number to the sum.
    for (let i = 1; i <= n; i++) {
        sum += i;
    }

    // After the loop, 'sum' will contain the total sum of numbers from 1 to 'n'.
    return sum;
}

// Approach C: A recursive solution.
// This approach breaks the problem down into smaller subproblems by reducing 'n' step by step.
function sum_to_n_c(n: number): number {
    // The base case: if 'n' is 0, we return 0 since there's nothing left to add.
    if (n === 0) {
        return 0;
    }

    // Otherwise, we add 'n' to the sum of all numbers from 1 to 'n-1'.
    // This recursive step continues until we hit the base case.
    return n + sum_to_n_c(n - 1);
}
